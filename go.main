package main

import (
    "html/template"
    "log"
    "net/http"
    "os"
    "strconv"
)

var tmpl *template.Template

type Todo struct {
    Item string
    Done bool
}

type PageData struct {
    Title string
    Todos []Todo
}

var todos []Todo

func todoHandler(w http.ResponseWriter, r *http.Request) {
    data := PageData{
        Title: "TODO List",
        Todos: todos,
    }

    err := tmpl.Execute(w, data)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
}

func addHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }

    newTask := template.HTMLEscapeString(r.FormValue("newTask"))
    if newTask != "" {
        todos = append(todos, Todo{Item: newTask, Done: false})
    }

    http.Redirect(w, r, "/todo", http.StatusSeeOther)
}

func updateHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }

    index, err := strconv.Atoi(r.URL.Path[len("/update/"):])
    if err != nil || index < 0 || index >= len(todos) {
        http.Error(w, "Invalid task index", http.StatusBadRequest)
        return
    }
    updatedTask := template.HTMLEscapeString(r.FormValue("updateTask"))
    done := r.FormValue("done") == "on"
    todos[index].Item = updatedTask
    todos[index].Done = done
    http.Redirect(w, r, "/todo", http.StatusSeeOther)
}

func deleteHandler(w http.ResponseWriter, r *http.Request) {
    index, err := strconv.Atoi(r.URL.Path[len("/delete/"):])
    if err != nil || index < 0 || index >= len(todos) {
        http.Error(w, "Invalid task index", http.StatusBadRequest)
        return
    }

    todos = append(todos[:index], todos[index+1:]...)
    http.Redirect(w, r, "/todo", http.StatusSeeOther)
}

func main() {
    todos = []Todo{
        {Item: "Install GO", Done: true},
        {Item: "Learn Go", Done: false},
    }
    tmpl, err := template.ParseFiles("templates/index.gohtml")
    if err != nil {
        log.Fatalf("Failed to parse template: %v", err)
    }

    fs := http.FileServer(http.Dir("./static"))
    _, err = os.Stat("./static")
    if os.IsNotExist(err) {
        log.Fatalf("Static directory does not exist.")
    }

    mux := http.NewServeMux()
    mux.Handle("/static/", http.StripPrefix("/static/", fs))
    mux.HandleFunc("/todo", todoHandler)
    mux.HandleFunc("/add", addHandler)
    mux.HandleFunc("/update/", updateHandler)
    mux.HandleFunc("/delete/", deleteHandler)
    if err := http.ListenAndServe(":8080", mux); err != nil {
        log.Fatalf("Server failed to start: %v", err)
    }
}
